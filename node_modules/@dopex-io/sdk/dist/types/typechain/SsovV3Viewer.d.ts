import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare type VaultCheckpointStruct = {
    activeCollateral: PromiseOrValue<BigNumberish>;
    totalCollateral: PromiseOrValue<BigNumberish>;
    accruedPremium: PromiseOrValue<BigNumberish>;
};
export declare type VaultCheckpointStructOutput = [BigNumber, BigNumber, BigNumber] & {
    activeCollateral: BigNumber;
    totalCollateral: BigNumber;
    accruedPremium: BigNumber;
};
export interface SsovV3ViewerInterface extends utils.Interface {
    functions: {
        "getCheckpoints(uint256,uint256,address)": FunctionFragment;
        "getEpochStrikeTokens(uint256,address)": FunctionFragment;
        "getTotalEpochOptionsPurchased(uint256,address)": FunctionFragment;
        "getTotalEpochPremium(uint256,address)": FunctionFragment;
        "getTotalEpochStrikeDeposits(uint256,address)": FunctionFragment;
        "getWritePositionValue(uint256,address)": FunctionFragment;
        "walletOfOwner(address,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getCheckpoints" | "getEpochStrikeTokens" | "getTotalEpochOptionsPurchased" | "getTotalEpochPremium" | "getTotalEpochStrikeDeposits" | "getWritePositionValue" | "walletOfOwner"): FunctionFragment;
    encodeFunctionData(functionFragment: "getCheckpoints", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "getEpochStrikeTokens", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getTotalEpochOptionsPurchased", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getTotalEpochPremium", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getTotalEpochStrikeDeposits", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getWritePositionValue", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "walletOfOwner", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "getCheckpoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEpochStrikeTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalEpochOptionsPurchased", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalEpochPremium", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTotalEpochStrikeDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getWritePositionValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "walletOfOwner", data: BytesLike): Result;
    events: {};
}
export interface SsovV3Viewer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SsovV3ViewerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getCheckpoints(epoch: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            VaultCheckpointStructOutput[]
        ] & {
            checkpoints: VaultCheckpointStructOutput[];
        }>;
        getEpochStrikeTokens(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]] & {
            strikeTokens: string[];
        }>;
        getTotalEpochOptionsPurchased(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]] & {
            _totalEpochOptionsPurchased: BigNumber[];
        }>;
        getTotalEpochPremium(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]] & {
            _totalEpochPremium: BigNumber[];
        }>;
        getTotalEpochStrikeDeposits(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]] & {
            totalEpochStrikeDeposits: BigNumber[];
        }>;
        getWritePositionValue(tokenId: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber[]
        ] & {
            estimatedCollateralUsage: BigNumber;
            accruedPremium: BigNumber;
            rewardTokenWithdrawAmounts: BigNumber[];
        }>;
        walletOfOwner(owner: PromiseOrValue<string>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]] & {
            tokenIds: BigNumber[];
        }>;
    };
    getCheckpoints(epoch: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<VaultCheckpointStructOutput[]>;
    getEpochStrikeTokens(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
    getTotalEpochOptionsPurchased(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
    getTotalEpochPremium(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
    getTotalEpochStrikeDeposits(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
    getWritePositionValue(tokenId: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        estimatedCollateralUsage: BigNumber;
        accruedPremium: BigNumber;
        rewardTokenWithdrawAmounts: BigNumber[];
    }>;
    walletOfOwner(owner: PromiseOrValue<string>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
    callStatic: {
        getCheckpoints(epoch: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<VaultCheckpointStructOutput[]>;
        getEpochStrikeTokens(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
        getTotalEpochOptionsPurchased(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
        getTotalEpochPremium(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
        getTotalEpochStrikeDeposits(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
        getWritePositionValue(tokenId: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber[]
        ] & {
            estimatedCollateralUsage: BigNumber;
            accruedPremium: BigNumber;
            rewardTokenWithdrawAmounts: BigNumber[];
        }>;
        walletOfOwner(owner: PromiseOrValue<string>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;
    };
    filters: {};
    estimateGas: {
        getCheckpoints(epoch: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getEpochStrikeTokens(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getTotalEpochOptionsPurchased(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getTotalEpochPremium(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getTotalEpochStrikeDeposits(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getWritePositionValue(tokenId: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        walletOfOwner(owner: PromiseOrValue<string>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getCheckpoints(epoch: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getEpochStrikeTokens(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTotalEpochOptionsPurchased(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTotalEpochPremium(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTotalEpochStrikeDeposits(epoch: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getWritePositionValue(tokenId: PromiseOrValue<BigNumberish>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        walletOfOwner(owner: PromiseOrValue<string>, ssov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
