import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface YieldMintInterface extends utils.Interface {
    functions: {
        "LP()": FunctionFragment;
        "NFTContract()": FunctionFragment;
        "NFTsForSale()": FunctionFragment;
        "adminMint(uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "claimAdminRewards(uint256,uint256)": FunctionFragment;
        "claimMint()": FunctionFragment;
        "depositLP(uint256,address)": FunctionFragment;
        "depositPeriod()": FunctionFragment;
        "depositWeth(address)": FunctionFragment;
        "didUserMint(address)": FunctionFragment;
        "dpx()": FunctionFragment;
        "dpxRewards()": FunctionFragment;
        "emergencyWithdraw(address[])": FunctionFragment;
        "endDeposits()": FunctionFragment;
        "endFarming()": FunctionFragment;
        "farmingPeriod()": FunctionFragment;
        "getPath(address,address)": FunctionFragment;
        "maxLpDeposits()": FunctionFragment;
        "maxSupply()": FunctionFragment;
        "mintPrice()": FunctionFragment;
        "owner()": FunctionFragment;
        "pause(bool)": FunctionFragment;
        "paused()": FunctionFragment;
        "rdpx()": FunctionFragment;
        "rdpxRewards()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setMaxLpDeposit(uint256)": FunctionFragment;
        "stakingRewards()": FunctionFragment;
        "startDeposits()": FunctionFragment;
        "totalDeposits()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "uniswapV2Router01()": FunctionFragment;
        "usersDeposit(address)": FunctionFragment;
        "weth()": FunctionFragment;
        "withdraw()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "LP" | "NFTContract" | "NFTsForSale" | "adminMint" | "balanceOf" | "claimAdminRewards" | "claimMint" | "depositLP" | "depositPeriod" | "depositWeth" | "didUserMint" | "dpx" | "dpxRewards" | "emergencyWithdraw" | "endDeposits" | "endFarming" | "farmingPeriod" | "getPath" | "maxLpDeposits" | "maxSupply" | "mintPrice" | "owner" | "pause" | "paused" | "rdpx" | "rdpxRewards" | "renounceOwnership" | "setMaxLpDeposit" | "stakingRewards" | "startDeposits" | "totalDeposits" | "transferOwnership" | "uniswapV2Router01" | "usersDeposit" | "weth" | "withdraw"): FunctionFragment;
    encodeFunctionData(functionFragment: "LP", values?: undefined): string;
    encodeFunctionData(functionFragment: "NFTContract", values?: undefined): string;
    encodeFunctionData(functionFragment: "NFTsForSale", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminMint", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "claimAdminRewards", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "claimMint", values?: undefined): string;
    encodeFunctionData(functionFragment: "depositLP", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "depositPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "depositWeth", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "didUserMint", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "dpx", values?: undefined): string;
    encodeFunctionData(functionFragment: "dpxRewards", values?: undefined): string;
    encodeFunctionData(functionFragment: "emergencyWithdraw", values: [PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "endDeposits", values?: undefined): string;
    encodeFunctionData(functionFragment: "endFarming", values?: undefined): string;
    encodeFunctionData(functionFragment: "farmingPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPath", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxLpDeposits", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pause", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "rdpx", values?: undefined): string;
    encodeFunctionData(functionFragment: "rdpxRewards", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setMaxLpDeposit", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "stakingRewards", values?: undefined): string;
    encodeFunctionData(functionFragment: "startDeposits", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalDeposits", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "uniswapV2Router01", values?: undefined): string;
    encodeFunctionData(functionFragment: "usersDeposit", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "weth", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
    decodeFunctionResult(functionFragment: "LP", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NFTContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "NFTsForSale", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminMint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimAdminRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimMint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositLP", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositWeth", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "didUserMint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dpx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dpxRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emergencyWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endFarming", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "farmingPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPath", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxLpDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rdpx", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rdpxRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaxLpDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "startDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uniswapV2Router01", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usersDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "DepositEth(address,uint256)": EventFragment;
        "DepositLP(address,uint256)": EventFragment;
        "Mint(address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "Withdraw(address,uint256)": EventFragment;
        "endDepositPeriod(uint256)": EventFragment;
        "endFarmingPeriod(uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DepositEth"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DepositLP"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "endDepositPeriod"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "endFarmingPeriod"): EventFragment;
}
export interface DepositEthEventObject {
    user: string;
    amountEth: BigNumber;
}
export declare type DepositEthEvent = TypedEvent<[
    string,
    BigNumber
], DepositEthEventObject>;
export declare type DepositEthEventFilter = TypedEventFilter<DepositEthEvent>;
export interface DepositLPEventObject {
    user: string;
    amountLP: BigNumber;
}
export declare type DepositLPEvent = TypedEvent<[
    string,
    BigNumber
], DepositLPEventObject>;
export declare type DepositLPEventFilter = TypedEventFilter<DepositLPEvent>;
export interface MintEventObject {
    user: string;
    amount: BigNumber;
}
export declare type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;
export declare type MintEventFilter = TypedEventFilter<MintEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface WithdrawEventObject {
    user: string;
    amount: BigNumber;
}
export declare type WithdrawEvent = TypedEvent<[
    string,
    BigNumber
], WithdrawEventObject>;
export declare type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;
export interface endDepositPeriodEventObject {
    blockTimeStamp: BigNumber;
}
export declare type endDepositPeriodEvent = TypedEvent<[
    BigNumber
], endDepositPeriodEventObject>;
export declare type endDepositPeriodEventFilter = TypedEventFilter<endDepositPeriodEvent>;
export interface endFarmingPeriodEventObject {
    blockTimeStamp: BigNumber;
}
export declare type endFarmingPeriodEvent = TypedEvent<[
    BigNumber
], endFarmingPeriodEventObject>;
export declare type endFarmingPeriodEventFilter = TypedEventFilter<endFarmingPeriodEvent>;
export interface YieldMint extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: YieldMintInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        LP(overrides?: CallOverrides): Promise<[string]>;
        NFTContract(overrides?: CallOverrides): Promise<[string]>;
        NFTsForSale(overrides?: CallOverrides): Promise<[BigNumber]>;
        adminMint(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        claimAdminRewards(amountDpx: PromiseOrValue<BigNumberish>, amountRdpx: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        claimMint(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        depositLP(amount: PromiseOrValue<BigNumberish>, userAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        depositPeriod(overrides?: CallOverrides): Promise<[boolean]>;
        depositWeth(userAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        didUserMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        dpx(overrides?: CallOverrides): Promise<[string]>;
        dpxRewards(overrides?: CallOverrides): Promise<[BigNumber]>;
        emergencyWithdraw(addressArray: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        endDeposits(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        endFarming(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        farmingPeriod(overrides?: CallOverrides): Promise<[boolean]>;
        getPath(_tokenA: PromiseOrValue<string>, _tokenB: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]] & {
            path: string[];
        }>;
        maxLpDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;
        maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        pause(_state: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        rdpx(overrides?: CallOverrides): Promise<[string]>;
        rdpxRewards(overrides?: CallOverrides): Promise<[BigNumber]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMaxLpDeposit(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        stakingRewards(overrides?: CallOverrides): Promise<[string]>;
        startDeposits(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        uniswapV2Router01(overrides?: CallOverrides): Promise<[string]>;
        usersDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        weth(overrides?: CallOverrides): Promise<[string]>;
        withdraw(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    LP(overrides?: CallOverrides): Promise<string>;
    NFTContract(overrides?: CallOverrides): Promise<string>;
    NFTsForSale(overrides?: CallOverrides): Promise<BigNumber>;
    adminMint(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    claimAdminRewards(amountDpx: PromiseOrValue<BigNumberish>, amountRdpx: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    claimMint(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    depositLP(amount: PromiseOrValue<BigNumberish>, userAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    depositPeriod(overrides?: CallOverrides): Promise<boolean>;
    depositWeth(userAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    didUserMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    dpx(overrides?: CallOverrides): Promise<string>;
    dpxRewards(overrides?: CallOverrides): Promise<BigNumber>;
    emergencyWithdraw(addressArray: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    endDeposits(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    endFarming(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    farmingPeriod(overrides?: CallOverrides): Promise<boolean>;
    getPath(_tokenA: PromiseOrValue<string>, _tokenB: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
    maxLpDeposits(overrides?: CallOverrides): Promise<BigNumber>;
    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;
    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    pause(_state: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    rdpx(overrides?: CallOverrides): Promise<string>;
    rdpxRewards(overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMaxLpDeposit(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    stakingRewards(overrides?: CallOverrides): Promise<string>;
    startDeposits(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    uniswapV2Router01(overrides?: CallOverrides): Promise<string>;
    usersDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    weth(overrides?: CallOverrides): Promise<string>;
    withdraw(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        LP(overrides?: CallOverrides): Promise<string>;
        NFTContract(overrides?: CallOverrides): Promise<string>;
        NFTsForSale(overrides?: CallOverrides): Promise<BigNumber>;
        adminMint(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        claimAdminRewards(amountDpx: PromiseOrValue<BigNumberish>, amountRdpx: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        claimMint(overrides?: CallOverrides): Promise<void>;
        depositLP(amount: PromiseOrValue<BigNumberish>, userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        depositPeriod(overrides?: CallOverrides): Promise<boolean>;
        depositWeth(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        didUserMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        dpx(overrides?: CallOverrides): Promise<string>;
        dpxRewards(overrides?: CallOverrides): Promise<BigNumber>;
        emergencyWithdraw(addressArray: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        endDeposits(overrides?: CallOverrides): Promise<void>;
        endFarming(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        farmingPeriod(overrides?: CallOverrides): Promise<boolean>;
        getPath(_tokenA: PromiseOrValue<string>, _tokenB: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
        maxLpDeposits(overrides?: CallOverrides): Promise<BigNumber>;
        maxSupply(overrides?: CallOverrides): Promise<BigNumber>;
        mintPrice(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        pause(_state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        rdpx(overrides?: CallOverrides): Promise<string>;
        rdpxRewards(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setMaxLpDeposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        stakingRewards(overrides?: CallOverrides): Promise<string>;
        startDeposits(overrides?: CallOverrides): Promise<void>;
        totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        uniswapV2Router01(overrides?: CallOverrides): Promise<string>;
        usersDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        weth(overrides?: CallOverrides): Promise<string>;
        withdraw(overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "DepositEth(address,uint256)"(user?: null, amountEth?: null): DepositEthEventFilter;
        DepositEth(user?: null, amountEth?: null): DepositEthEventFilter;
        "DepositLP(address,uint256)"(user?: null, amountLP?: null): DepositLPEventFilter;
        DepositLP(user?: null, amountLP?: null): DepositLPEventFilter;
        "Mint(address,uint256)"(user?: null, amount?: null): MintEventFilter;
        Mint(user?: null, amount?: null): MintEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "Withdraw(address,uint256)"(user?: null, amount?: null): WithdrawEventFilter;
        Withdraw(user?: null, amount?: null): WithdrawEventFilter;
        "endDepositPeriod(uint256)"(blockTimeStamp?: null): endDepositPeriodEventFilter;
        endDepositPeriod(blockTimeStamp?: null): endDepositPeriodEventFilter;
        "endFarmingPeriod(uint256)"(blockTimeStamp?: null): endFarmingPeriodEventFilter;
        endFarmingPeriod(blockTimeStamp?: null): endFarmingPeriodEventFilter;
    };
    estimateGas: {
        LP(overrides?: CallOverrides): Promise<BigNumber>;
        NFTContract(overrides?: CallOverrides): Promise<BigNumber>;
        NFTsForSale(overrides?: CallOverrides): Promise<BigNumber>;
        adminMint(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        claimAdminRewards(amountDpx: PromiseOrValue<BigNumberish>, amountRdpx: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        claimMint(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        depositLP(amount: PromiseOrValue<BigNumberish>, userAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        depositPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        depositWeth(userAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        didUserMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        dpx(overrides?: CallOverrides): Promise<BigNumber>;
        dpxRewards(overrides?: CallOverrides): Promise<BigNumber>;
        emergencyWithdraw(addressArray: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        endDeposits(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        endFarming(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        farmingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        getPath(_tokenA: PromiseOrValue<string>, _tokenB: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        maxLpDeposits(overrides?: CallOverrides): Promise<BigNumber>;
        maxSupply(overrides?: CallOverrides): Promise<BigNumber>;
        mintPrice(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        pause(_state: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        rdpx(overrides?: CallOverrides): Promise<BigNumber>;
        rdpxRewards(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMaxLpDeposit(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        stakingRewards(overrides?: CallOverrides): Promise<BigNumber>;
        startDeposits(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        uniswapV2Router01(overrides?: CallOverrides): Promise<BigNumber>;
        usersDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        weth(overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        LP(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NFTContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        NFTsForSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        adminMint(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        claimAdminRewards(amountDpx: PromiseOrValue<BigNumberish>, amountRdpx: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        claimMint(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        depositLP(amount: PromiseOrValue<BigNumberish>, userAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        depositPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        depositWeth(userAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        didUserMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dpx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dpxRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        emergencyWithdraw(addressArray: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        endDeposits(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        endFarming(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        farmingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPath(_tokenA: PromiseOrValue<string>, _tokenB: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxLpDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pause(_state: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rdpx(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rdpxRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMaxLpDeposit(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        stakingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        startDeposits(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        uniswapV2Router01(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        usersDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdraw(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
