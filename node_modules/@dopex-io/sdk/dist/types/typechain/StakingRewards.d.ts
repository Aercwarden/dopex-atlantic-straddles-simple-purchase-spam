import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface StakingRewardsInterface extends utils.Interface {
    functions: {
        "addToContractWhitelist(address)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "boost()": FunctionFragment;
        "boostedFinish()": FunctionFragment;
        "boostedTimePeriod()": FunctionFragment;
        "compound()": FunctionFragment;
        "earned(address)": FunctionFragment;
        "exit()": FunctionFragment;
        "getReward(uint256)": FunctionFragment;
        "id()": FunctionFragment;
        "isContract(address)": FunctionFragment;
        "lastTimeRewardApplicable()": FunctionFragment;
        "lastUpdateTime()": FunctionFragment;
        "notifyRewardAmount(uint256,uint256)": FunctionFragment;
        "owner()": FunctionFragment;
        "periodFinish()": FunctionFragment;
        "removeFromContractWhitelist(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "rewardPerToken()": FunctionFragment;
        "rewardPerTokenStoredDPX()": FunctionFragment;
        "rewardPerTokenStoredRDPX()": FunctionFragment;
        "rewardRateDPX()": FunctionFragment;
        "rewardRateRDPX()": FunctionFragment;
        "rewardsDPX(address)": FunctionFragment;
        "rewardsDistribution()": FunctionFragment;
        "rewardsDuration()": FunctionFragment;
        "rewardsRDPX(address)": FunctionFragment;
        "rewardsTokenDPX()": FunctionFragment;
        "rewardsTokenRDPX()": FunctionFragment;
        "stake(uint256)": FunctionFragment;
        "stakingToken()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "userDPXRewardPerTokenPaid(address)": FunctionFragment;
        "userRDPXRewardPerTokenPaid(address)": FunctionFragment;
        "whitelistedContracts(address)": FunctionFragment;
        "withdraw(uint256)": FunctionFragment;
        "withdrawRewardTokens(uint256,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addToContractWhitelist" | "balanceOf" | "boost" | "boostedFinish" | "boostedTimePeriod" | "compound" | "earned" | "exit" | "getReward" | "id" | "isContract" | "lastTimeRewardApplicable" | "lastUpdateTime" | "notifyRewardAmount" | "owner" | "periodFinish" | "removeFromContractWhitelist" | "renounceOwnership" | "rewardPerToken" | "rewardPerTokenStoredDPX" | "rewardPerTokenStoredRDPX" | "rewardRateDPX" | "rewardRateRDPX" | "rewardsDPX" | "rewardsDistribution" | "rewardsDuration" | "rewardsRDPX" | "rewardsTokenDPX" | "rewardsTokenRDPX" | "stake" | "stakingToken" | "totalSupply" | "transferOwnership" | "userDPXRewardPerTokenPaid" | "userRDPXRewardPerTokenPaid" | "whitelistedContracts" | "withdraw" | "withdrawRewardTokens"): FunctionFragment;
    encodeFunctionData(functionFragment: "addToContractWhitelist", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "boost", values?: undefined): string;
    encodeFunctionData(functionFragment: "boostedFinish", values?: undefined): string;
    encodeFunctionData(functionFragment: "boostedTimePeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "compound", values?: undefined): string;
    encodeFunctionData(functionFragment: "earned", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "exit", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReward", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "id", values?: undefined): string;
    encodeFunctionData(functionFragment: "isContract", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "lastTimeRewardApplicable", values?: undefined): string;
    encodeFunctionData(functionFragment: "lastUpdateTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "notifyRewardAmount", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "periodFinish", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeFromContractWhitelist", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardPerToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardPerTokenStoredDPX", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardPerTokenStoredRDPX", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardRateDPX", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardRateRDPX", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardsDPX", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "rewardsDistribution", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardsDuration", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardsRDPX", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "rewardsTokenDPX", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardsTokenRDPX", values?: undefined): string;
    encodeFunctionData(functionFragment: "stake", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "stakingToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "userDPXRewardPerTokenPaid", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "userRDPXRewardPerTokenPaid", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "whitelistedContracts", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdraw", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawRewardTokens", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "addToContractWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "boost", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "boostedFinish", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "boostedTimePeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastTimeRewardApplicable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastUpdateTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "notifyRewardAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "periodFinish", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeFromContractWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardPerToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardPerTokenStoredDPX", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardPerTokenStoredRDPX", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardRateDPX", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardRateRDPX", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardsDPX", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardsDistribution", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardsDuration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardsRDPX", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardsTokenDPX", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardsTokenRDPX", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakingToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userDPXRewardPerTokenPaid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userRDPXRewardPerTokenPaid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelistedContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawRewardTokens", data: BytesLike): Result;
    events: {
        "AddToContractWhitelist(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "RemoveFromContractWhitelist(address)": EventFragment;
        "RewardAdded(uint256,uint256)": EventFragment;
        "RewardCompounded(address,uint256)": EventFragment;
        "RewardPaid(address,uint256)": EventFragment;
        "RewardUpdated(uint256,uint256)": EventFragment;
        "Staked(address,uint256)": EventFragment;
        "Withdrawn(address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddToContractWhitelist"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemoveFromContractWhitelist"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardCompounded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}
export interface AddToContractWhitelistEventObject {
    _contract: string;
}
export declare type AddToContractWhitelistEvent = TypedEvent<[
    string
], AddToContractWhitelistEventObject>;
export declare type AddToContractWhitelistEventFilter = TypedEventFilter<AddToContractWhitelistEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface RemoveFromContractWhitelistEventObject {
    _contract: string;
}
export declare type RemoveFromContractWhitelistEvent = TypedEvent<[
    string
], RemoveFromContractWhitelistEventObject>;
export declare type RemoveFromContractWhitelistEventFilter = TypedEventFilter<RemoveFromContractWhitelistEvent>;
export interface RewardAddedEventObject {
    rewardDPX: BigNumber;
    rewardRDPX: BigNumber;
}
export declare type RewardAddedEvent = TypedEvent<[
    BigNumber,
    BigNumber
], RewardAddedEventObject>;
export declare type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;
export interface RewardCompoundedEventObject {
    user: string;
    rewardDPX: BigNumber;
}
export declare type RewardCompoundedEvent = TypedEvent<[
    string,
    BigNumber
], RewardCompoundedEventObject>;
export declare type RewardCompoundedEventFilter = TypedEventFilter<RewardCompoundedEvent>;
export interface RewardPaidEventObject {
    user: string;
    reward: BigNumber;
}
export declare type RewardPaidEvent = TypedEvent<[
    string,
    BigNumber
], RewardPaidEventObject>;
export declare type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;
export interface RewardUpdatedEventObject {
    rewardDPX: BigNumber;
    rewardRDPX: BigNumber;
}
export declare type RewardUpdatedEvent = TypedEvent<[
    BigNumber,
    BigNumber
], RewardUpdatedEventObject>;
export declare type RewardUpdatedEventFilter = TypedEventFilter<RewardUpdatedEvent>;
export interface StakedEventObject {
    user: string;
    amount: BigNumber;
}
export declare type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;
export declare type StakedEventFilter = TypedEventFilter<StakedEvent>;
export interface WithdrawnEventObject {
    user: string;
    amount: BigNumber;
}
export declare type WithdrawnEvent = TypedEvent<[
    string,
    BigNumber
], WithdrawnEventObject>;
export declare type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;
export interface StakingRewards extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: StakingRewardsInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        boost(overrides?: CallOverrides): Promise<[BigNumber]>;
        boostedFinish(overrides?: CallOverrides): Promise<[BigNumber]>;
        boostedTimePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
        compound(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        earned(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            DPXtokensEarned: BigNumber;
            RDPXtokensEarned: BigNumber;
        }>;
        exit(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getReward(rewardsTokenID: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        id(overrides?: CallOverrides): Promise<[BigNumber]>;
        isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;
        lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;
        notifyRewardAmount(rewardDPX: PromiseOrValue<BigNumberish>, rewardRDPX: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;
        removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<[BigNumber]>;
        rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<[BigNumber]>;
        rewardRateDPX(overrides?: CallOverrides): Promise<[BigNumber]>;
        rewardRateRDPX(overrides?: CallOverrides): Promise<[BigNumber]>;
        rewardsDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        rewardsDistribution(overrides?: CallOverrides): Promise<[string]>;
        rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;
        rewardsRDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        rewardsTokenDPX(overrides?: CallOverrides): Promise<[string]>;
        rewardsTokenRDPX(overrides?: CallOverrides): Promise<[string]>;
        stake(amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        stakingToken(overrides?: CallOverrides): Promise<[string]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        userDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        userRDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawRewardTokens(amountDPX: PromiseOrValue<BigNumberish>, amountRDPX: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    boost(overrides?: CallOverrides): Promise<BigNumber>;
    boostedFinish(overrides?: CallOverrides): Promise<BigNumber>;
    boostedTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;
    compound(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    earned(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        DPXtokensEarned: BigNumber;
        RDPXtokensEarned: BigNumber;
    }>;
    exit(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getReward(rewardsTokenID: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    id(overrides?: CallOverrides): Promise<BigNumber>;
    isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;
    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;
    notifyRewardAmount(rewardDPX: PromiseOrValue<BigNumberish>, rewardRDPX: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;
    removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
    rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<BigNumber>;
    rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<BigNumber>;
    rewardRateDPX(overrides?: CallOverrides): Promise<BigNumber>;
    rewardRateRDPX(overrides?: CallOverrides): Promise<BigNumber>;
    rewardsDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    rewardsDistribution(overrides?: CallOverrides): Promise<string>;
    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;
    rewardsRDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    rewardsTokenDPX(overrides?: CallOverrides): Promise<string>;
    rewardsTokenRDPX(overrides?: CallOverrides): Promise<string>;
    stake(amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    stakingToken(overrides?: CallOverrides): Promise<string>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    userDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    userRDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawRewardTokens(amountDPX: PromiseOrValue<BigNumberish>, amountRDPX: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        boost(overrides?: CallOverrides): Promise<BigNumber>;
        boostedFinish(overrides?: CallOverrides): Promise<BigNumber>;
        boostedTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;
        compound(overrides?: CallOverrides): Promise<void>;
        earned(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            DPXtokensEarned: BigNumber;
            RDPXtokensEarned: BigNumber;
        }>;
        exit(overrides?: CallOverrides): Promise<void>;
        getReward(rewardsTokenID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        id(overrides?: CallOverrides): Promise<BigNumber>;
        isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;
        lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;
        notifyRewardAmount(rewardDPX: PromiseOrValue<BigNumberish>, rewardRDPX: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        periodFinish(overrides?: CallOverrides): Promise<BigNumber>;
        removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardRateDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardRateRDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardsDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        rewardsDistribution(overrides?: CallOverrides): Promise<string>;
        rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;
        rewardsRDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        rewardsTokenDPX(overrides?: CallOverrides): Promise<string>;
        rewardsTokenRDPX(overrides?: CallOverrides): Promise<string>;
        stake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        stakingToken(overrides?: CallOverrides): Promise<string>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        userDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        userRDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawRewardTokens(amountDPX: PromiseOrValue<BigNumberish>, amountRDPX: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
    };
    filters: {
        "AddToContractWhitelist(address)"(_contract?: PromiseOrValue<string> | null): AddToContractWhitelistEventFilter;
        AddToContractWhitelist(_contract?: PromiseOrValue<string> | null): AddToContractWhitelistEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "RemoveFromContractWhitelist(address)"(_contract?: PromiseOrValue<string> | null): RemoveFromContractWhitelistEventFilter;
        RemoveFromContractWhitelist(_contract?: PromiseOrValue<string> | null): RemoveFromContractWhitelistEventFilter;
        "RewardAdded(uint256,uint256)"(rewardDPX?: null, rewardRDPX?: null): RewardAddedEventFilter;
        RewardAdded(rewardDPX?: null, rewardRDPX?: null): RewardAddedEventFilter;
        "RewardCompounded(address,uint256)"(user?: PromiseOrValue<string> | null, rewardDPX?: null): RewardCompoundedEventFilter;
        RewardCompounded(user?: PromiseOrValue<string> | null, rewardDPX?: null): RewardCompoundedEventFilter;
        "RewardPaid(address,uint256)"(user?: PromiseOrValue<string> | null, reward?: null): RewardPaidEventFilter;
        RewardPaid(user?: PromiseOrValue<string> | null, reward?: null): RewardPaidEventFilter;
        "RewardUpdated(uint256,uint256)"(rewardDPX?: null, rewardRDPX?: null): RewardUpdatedEventFilter;
        RewardUpdated(rewardDPX?: null, rewardRDPX?: null): RewardUpdatedEventFilter;
        "Staked(address,uint256)"(user?: PromiseOrValue<string> | null, amount?: null): StakedEventFilter;
        Staked(user?: PromiseOrValue<string> | null, amount?: null): StakedEventFilter;
        "Withdrawn(address,uint256)"(user?: PromiseOrValue<string> | null, amount?: null): WithdrawnEventFilter;
        Withdrawn(user?: PromiseOrValue<string> | null, amount?: null): WithdrawnEventFilter;
    };
    estimateGas: {
        addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        boost(overrides?: CallOverrides): Promise<BigNumber>;
        boostedFinish(overrides?: CallOverrides): Promise<BigNumber>;
        boostedTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;
        compound(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        earned(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        exit(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getReward(rewardsTokenID: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        id(overrides?: CallOverrides): Promise<BigNumber>;
        isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;
        lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;
        notifyRewardAmount(rewardDPX: PromiseOrValue<BigNumberish>, rewardRDPX: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        periodFinish(overrides?: CallOverrides): Promise<BigNumber>;
        removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;
        rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardRateDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardRateRDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardsDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        rewardsDistribution(overrides?: CallOverrides): Promise<BigNumber>;
        rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;
        rewardsRDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        rewardsTokenDPX(overrides?: CallOverrides): Promise<BigNumber>;
        rewardsTokenRDPX(overrides?: CallOverrides): Promise<BigNumber>;
        stake(amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        stakingToken(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        userDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        userRDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawRewardTokens(amountDPX: PromiseOrValue<BigNumberish>, amountRDPX: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addToContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        boost(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        boostedFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        boostedTimePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        compound(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        earned(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        exit(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getReward(rewardsTokenID: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        id(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isContract(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lastTimeRewardApplicable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        notifyRewardAmount(rewardDPX: PromiseOrValue<BigNumberish>, rewardRDPX: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeFromContractWhitelist(_contract: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardRateDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardRateRDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardsDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardsDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardsRDPX(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardsTokenDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardsTokenRDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        stake(amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        userDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        userRDPXRewardPerTokenPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        whitelistedContracts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawRewardTokens(amountDPX: PromiseOrValue<BigNumberish>, amountRDPX: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
