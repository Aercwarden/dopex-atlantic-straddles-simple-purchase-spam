import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace TZWAP {
    type OracleStruct = {
        oracleAddress: PromiseOrValue<string>;
        isChainlink: PromiseOrValue<boolean>;
    };
    type OracleStructOutput = [string, boolean] & {
        oracleAddress: string;
        isChainlink: boolean;
    };
    type SwapParamsStruct = {
        caller: PromiseOrValue<string>;
        desc: I1inchAggregationRouterV4.SwapDescriptionStruct;
        data: PromiseOrValue<BytesLike>;
    };
    type SwapParamsStructOutput = [
        string,
        I1inchAggregationRouterV4.SwapDescriptionStructOutput,
        string
    ] & {
        caller: string;
        desc: I1inchAggregationRouterV4.SwapDescriptionStructOutput;
        data: string;
    };
    type UnoswapParamsStruct = {
        srcToken: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
        minReturn: PromiseOrValue<BigNumberish>;
        pools: PromiseOrValue<BytesLike>[];
    };
    type UnoswapParamsStructOutput = [
        string,
        BigNumber,
        BigNumber,
        string[]
    ] & {
        srcToken: string;
        amount: BigNumber;
        minReturn: BigNumber;
        pools: string[];
    };
    type UniswapV3ParamsStruct = {
        amount: PromiseOrValue<BigNumberish>;
        minReturn: PromiseOrValue<BigNumberish>;
        pools: PromiseOrValue<BigNumberish>[];
    };
    type UniswapV3ParamsStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber[]
    ] & {
        amount: BigNumber;
        minReturn: BigNumber;
        pools: BigNumber[];
    };
    type TWAPOrderStruct = {
        creator: PromiseOrValue<string>;
        srcToken: PromiseOrValue<string>;
        dstToken: PromiseOrValue<string>;
        interval: PromiseOrValue<BigNumberish>;
        tickSize: PromiseOrValue<BigNumberish>;
        total: PromiseOrValue<BigNumberish>;
        minFees: PromiseOrValue<BigNumberish>;
        maxFees: PromiseOrValue<BigNumberish>;
        created: PromiseOrValue<BigNumberish>;
        killed: PromiseOrValue<boolean>;
    };
    type TWAPOrderStructOutput = [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
    ] & {
        creator: string;
        srcToken: string;
        dstToken: string;
        interval: BigNumber;
        tickSize: BigNumber;
        total: BigNumber;
        minFees: BigNumber;
        maxFees: BigNumber;
        created: BigNumber;
        killed: boolean;
    };
}
export declare namespace I1inchAggregationRouterV4 {
    type SwapDescriptionStruct = {
        srcToken: PromiseOrValue<string>;
        dstToken: PromiseOrValue<string>;
        srcReceiver: PromiseOrValue<string>;
        dstReceiver: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
        minReturnAmount: PromiseOrValue<BigNumberish>;
        flags: PromiseOrValue<BigNumberish>;
        permit: PromiseOrValue<BytesLike>;
    };
    type SwapDescriptionStructOutput = [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
    ] & {
        srcToken: string;
        dstToken: string;
        srcReceiver: string;
        dstReceiver: string;
        amount: BigNumber;
        minReturnAmount: BigNumber;
        flags: BigNumber;
        permit: string;
    };
}
export interface Tzwap1inchRouterInterface extends utils.Interface {
    functions: {
        "addOracle(address,(address,bool))": FunctionFragment;
        "addToWhitelist(address)": FunctionFragment;
        "aggregationRouterV4()": FunctionFragment;
        "fillOrder(uint256,uint256,(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes),(address,uint256,uint256,bytes32[]),(uint256,uint256,uint256[]))": FunctionFragment;
        "fills(uint256,uint256)": FunctionFragment;
        "getDstTokensReceivedForOrder(uint256)": FunctionFragment;
        "getSrcTokensSwappedForOrder(uint256)": FunctionFragment;
        "getSrcTokensToSwap(uint256)": FunctionFragment;
        "getTicksFilled(uint256)": FunctionFragment;
        "getTicksToFill(uint256)": FunctionFragment;
        "getTimeElapsedSinceLastFill(uint256)": FunctionFragment;
        "isOrderActive(uint256)": FunctionFragment;
        "isWhitelistActive()": FunctionFragment;
        "killOrder(uint256)": FunctionFragment;
        "minInterval()": FunctionFragment;
        "minNumOfIntervals()": FunctionFragment;
        "newOrder((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
        "oracles(address)": FunctionFragment;
        "orderCount()": FunctionFragment;
        "orders(uint256)": FunctionFragment;
        "owner()": FunctionFragment;
        "paused()": FunctionFragment;
        "percentagePrecision()": FunctionFragment;
        "removeFromWhitelist(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "toggleWhitelist(bool)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "userOrders(address,uint256)": FunctionFragment;
        "weth()": FunctionFragment;
        "whitelist(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addOracle" | "addToWhitelist" | "aggregationRouterV4" | "fillOrder" | "fills" | "getDstTokensReceivedForOrder" | "getSrcTokensSwappedForOrder" | "getSrcTokensToSwap" | "getTicksFilled" | "getTicksToFill" | "getTimeElapsedSinceLastFill" | "isOrderActive" | "isWhitelistActive" | "killOrder" | "minInterval" | "minNumOfIntervals" | "newOrder" | "oracles" | "orderCount" | "orders" | "owner" | "paused" | "percentagePrecision" | "removeFromWhitelist" | "renounceOwnership" | "toggleWhitelist" | "transferOwnership" | "userOrders" | "weth" | "whitelist"): FunctionFragment;
    encodeFunctionData(functionFragment: "addOracle", values: [PromiseOrValue<string>, TZWAP.OracleStruct]): string;
    encodeFunctionData(functionFragment: "addToWhitelist", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "aggregationRouterV4", values?: undefined): string;
    encodeFunctionData(functionFragment: "fillOrder", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        TZWAP.SwapParamsStruct,
        TZWAP.UnoswapParamsStruct,
        TZWAP.UniswapV3ParamsStruct
    ]): string;
    encodeFunctionData(functionFragment: "fills", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getDstTokensReceivedForOrder", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getSrcTokensSwappedForOrder", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getSrcTokensToSwap", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getTicksFilled", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getTicksToFill", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getTimeElapsedSinceLastFill", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isOrderActive", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isWhitelistActive", values?: undefined): string;
    encodeFunctionData(functionFragment: "killOrder", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "minInterval", values?: undefined): string;
    encodeFunctionData(functionFragment: "minNumOfIntervals", values?: undefined): string;
    encodeFunctionData(functionFragment: "newOrder", values: [TZWAP.TWAPOrderStruct]): string;
    encodeFunctionData(functionFragment: "oracles", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "orderCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "orders", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "percentagePrecision", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeFromWhitelist", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "toggleWhitelist", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "userOrders", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "weth", values?: undefined): string;
    encodeFunctionData(functionFragment: "whitelist", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addToWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "aggregationRouterV4", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fills", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDstTokensReceivedForOrder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSrcTokensSwappedForOrder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSrcTokensToSwap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTicksFilled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTicksToFill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimeElapsedSinceLastFill", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOrderActive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isWhitelistActive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "killOrder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minInterval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minNumOfIntervals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "newOrder", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "orderCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "percentagePrecision", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeFromWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleWhitelist", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userOrders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
    events: {
        "LogNewFill(uint256,uint256)": EventFragment;
        "LogNewOrder(uint256)": EventFragment;
        "LogOrderKilled(uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "Paused(address)": EventFragment;
        "Unpaused(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "LogNewFill"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogNewOrder"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogOrderKilled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}
export interface LogNewFillEventObject {
    id: BigNumber;
    fillIndex: BigNumber;
}
export declare type LogNewFillEvent = TypedEvent<[
    BigNumber,
    BigNumber
], LogNewFillEventObject>;
export declare type LogNewFillEventFilter = TypedEventFilter<LogNewFillEvent>;
export interface LogNewOrderEventObject {
    id: BigNumber;
}
export declare type LogNewOrderEvent = TypedEvent<[BigNumber], LogNewOrderEventObject>;
export declare type LogNewOrderEventFilter = TypedEventFilter<LogNewOrderEvent>;
export interface LogOrderKilledEventObject {
    id: BigNumber;
}
export declare type LogOrderKilledEvent = TypedEvent<[
    BigNumber
], LogOrderKilledEventObject>;
export declare type LogOrderKilledEventFilter = TypedEventFilter<LogOrderKilledEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface PausedEventObject {
    account: string;
}
export declare type PausedEvent = TypedEvent<[string], PausedEventObject>;
export declare type PausedEventFilter = TypedEventFilter<PausedEvent>;
export interface UnpausedEventObject {
    account: string;
}
export declare type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;
export declare type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;
export interface Tzwap1inchRouter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: Tzwap1inchRouterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addOracle(token: PromiseOrValue<string>, oracle: TZWAP.OracleStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addToWhitelist(authorized: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        aggregationRouterV4(overrides?: CallOverrides): Promise<[string]>;
        fillOrder(id: PromiseOrValue<BigNumberish>, swapType: PromiseOrValue<BigNumberish>, _swapParams: TZWAP.SwapParamsStruct, _unoswapParams: TZWAP.UnoswapParamsStruct, _uniswapV3Params: TZWAP.UniswapV3ParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        fills(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            filler: string;
            ticksFilled: BigNumber;
            srcTokensSwapped: BigNumber;
            dstTokensReceived: BigNumber;
            fees: BigNumber;
            timestamp: BigNumber;
        }>;
        getDstTokensReceivedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getSrcTokensSwappedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getSrcTokensToSwap(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getTicksFilled(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getTicksToFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getTimeElapsedSinceLastFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        isOrderActive(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isWhitelistActive(overrides?: CallOverrides): Promise<[boolean]>;
        killOrder(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        minInterval(overrides?: CallOverrides): Promise<[BigNumber]>;
        minNumOfIntervals(overrides?: CallOverrides): Promise<[BigNumber]>;
        newOrder(order: TZWAP.TWAPOrderStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        oracles(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string,
            boolean
        ] & {
            oracleAddress: string;
            isChainlink: boolean;
        }>;
        orderCount(overrides?: CallOverrides): Promise<[BigNumber]>;
        orders(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
        ] & {
            creator: string;
            srcToken: string;
            dstToken: string;
            interval: BigNumber;
            tickSize: BigNumber;
            total: BigNumber;
            minFees: BigNumber;
            maxFees: BigNumber;
            created: BigNumber;
            killed: boolean;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        percentagePrecision(overrides?: CallOverrides): Promise<[BigNumber]>;
        removeFromWhitelist(authorized: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        toggleWhitelist(value: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        userOrders(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        weth(overrides?: CallOverrides): Promise<[string]>;
        whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    addOracle(token: PromiseOrValue<string>, oracle: TZWAP.OracleStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addToWhitelist(authorized: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    aggregationRouterV4(overrides?: CallOverrides): Promise<string>;
    fillOrder(id: PromiseOrValue<BigNumberish>, swapType: PromiseOrValue<BigNumberish>, _swapParams: TZWAP.SwapParamsStruct, _unoswapParams: TZWAP.UnoswapParamsStruct, _uniswapV3Params: TZWAP.UniswapV3ParamsStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    fills(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        filler: string;
        ticksFilled: BigNumber;
        srcTokensSwapped: BigNumber;
        dstTokensReceived: BigNumber;
        fees: BigNumber;
        timestamp: BigNumber;
    }>;
    getDstTokensReceivedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getSrcTokensSwappedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getSrcTokensToSwap(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getTicksFilled(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getTicksToFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    getTimeElapsedSinceLastFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    isOrderActive(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isWhitelistActive(overrides?: CallOverrides): Promise<boolean>;
    killOrder(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    minInterval(overrides?: CallOverrides): Promise<BigNumber>;
    minNumOfIntervals(overrides?: CallOverrides): Promise<BigNumber>;
    newOrder(order: TZWAP.TWAPOrderStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    oracles(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        string,
        boolean
    ] & {
        oracleAddress: string;
        isChainlink: boolean;
    }>;
    orderCount(overrides?: CallOverrides): Promise<BigNumber>;
    orders(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
    ] & {
        creator: string;
        srcToken: string;
        dstToken: string;
        interval: BigNumber;
        tickSize: BigNumber;
        total: BigNumber;
        minFees: BigNumber;
        maxFees: BigNumber;
        created: BigNumber;
        killed: boolean;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    percentagePrecision(overrides?: CallOverrides): Promise<BigNumber>;
    removeFromWhitelist(authorized: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    toggleWhitelist(value: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    userOrders(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    weth(overrides?: CallOverrides): Promise<string>;
    whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        addOracle(token: PromiseOrValue<string>, oracle: TZWAP.OracleStruct, overrides?: CallOverrides): Promise<void>;
        addToWhitelist(authorized: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        aggregationRouterV4(overrides?: CallOverrides): Promise<string>;
        fillOrder(id: PromiseOrValue<BigNumberish>, swapType: PromiseOrValue<BigNumberish>, _swapParams: TZWAP.SwapParamsStruct, _unoswapParams: TZWAP.UnoswapParamsStruct, _uniswapV3Params: TZWAP.UniswapV3ParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;
        fills(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            filler: string;
            ticksFilled: BigNumber;
            srcTokensSwapped: BigNumber;
            dstTokensReceived: BigNumber;
            fees: BigNumber;
            timestamp: BigNumber;
        }>;
        getDstTokensReceivedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getSrcTokensSwappedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getSrcTokensToSwap(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTicksFilled(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTicksToFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTimeElapsedSinceLastFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isOrderActive(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isWhitelistActive(overrides?: CallOverrides): Promise<boolean>;
        killOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        minInterval(overrides?: CallOverrides): Promise<BigNumber>;
        minNumOfIntervals(overrides?: CallOverrides): Promise<BigNumber>;
        newOrder(order: TZWAP.TWAPOrderStruct, overrides?: CallOverrides): Promise<boolean>;
        oracles(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string,
            boolean
        ] & {
            oracleAddress: string;
            isChainlink: boolean;
        }>;
        orderCount(overrides?: CallOverrides): Promise<BigNumber>;
        orders(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean
        ] & {
            creator: string;
            srcToken: string;
            dstToken: string;
            interval: BigNumber;
            tickSize: BigNumber;
            total: BigNumber;
            minFees: BigNumber;
            maxFees: BigNumber;
            created: BigNumber;
            killed: boolean;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        percentagePrecision(overrides?: CallOverrides): Promise<BigNumber>;
        removeFromWhitelist(authorized: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        toggleWhitelist(value: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        userOrders(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        weth(overrides?: CallOverrides): Promise<string>;
        whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "LogNewFill(uint256,uint256)"(id?: null, fillIndex?: null): LogNewFillEventFilter;
        LogNewFill(id?: null, fillIndex?: null): LogNewFillEventFilter;
        "LogNewOrder(uint256)"(id?: null): LogNewOrderEventFilter;
        LogNewOrder(id?: null): LogNewOrderEventFilter;
        "LogOrderKilled(uint256)"(id?: null): LogOrderKilledEventFilter;
        LogOrderKilled(id?: null): LogOrderKilledEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "Paused(address)"(account?: null): PausedEventFilter;
        Paused(account?: null): PausedEventFilter;
        "Unpaused(address)"(account?: null): UnpausedEventFilter;
        Unpaused(account?: null): UnpausedEventFilter;
    };
    estimateGas: {
        addOracle(token: PromiseOrValue<string>, oracle: TZWAP.OracleStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addToWhitelist(authorized: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        aggregationRouterV4(overrides?: CallOverrides): Promise<BigNumber>;
        fillOrder(id: PromiseOrValue<BigNumberish>, swapType: PromiseOrValue<BigNumberish>, _swapParams: TZWAP.SwapParamsStruct, _unoswapParams: TZWAP.UnoswapParamsStruct, _uniswapV3Params: TZWAP.UniswapV3ParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        fills(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDstTokensReceivedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getSrcTokensSwappedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getSrcTokensToSwap(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTicksFilled(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTicksToFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getTimeElapsedSinceLastFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isOrderActive(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isWhitelistActive(overrides?: CallOverrides): Promise<BigNumber>;
        killOrder(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        minInterval(overrides?: CallOverrides): Promise<BigNumber>;
        minNumOfIntervals(overrides?: CallOverrides): Promise<BigNumber>;
        newOrder(order: TZWAP.TWAPOrderStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        oracles(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        orderCount(overrides?: CallOverrides): Promise<BigNumber>;
        orders(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        percentagePrecision(overrides?: CallOverrides): Promise<BigNumber>;
        removeFromWhitelist(authorized: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        toggleWhitelist(value: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        userOrders(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        weth(overrides?: CallOverrides): Promise<BigNumber>;
        whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        addOracle(token: PromiseOrValue<string>, oracle: TZWAP.OracleStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addToWhitelist(authorized: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        aggregationRouterV4(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fillOrder(id: PromiseOrValue<BigNumberish>, swapType: PromiseOrValue<BigNumberish>, _swapParams: TZWAP.SwapParamsStruct, _unoswapParams: TZWAP.UnoswapParamsStruct, _uniswapV3Params: TZWAP.UniswapV3ParamsStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        fills(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDstTokensReceivedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSrcTokensSwappedForOrder(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSrcTokensToSwap(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTicksFilled(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTicksToFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getTimeElapsedSinceLastFill(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isOrderActive(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isWhitelistActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        killOrder(id: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        minInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        minNumOfIntervals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        newOrder(order: TZWAP.TWAPOrderStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        oracles(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        orderCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        orders(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        percentagePrecision(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeFromWhitelist(authorized: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        toggleWhitelist(value: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        userOrders(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
