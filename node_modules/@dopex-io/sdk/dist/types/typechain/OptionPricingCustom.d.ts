import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace OptionPricingCustom {
    type MultipliersStruct = {
        callCurveMultiplier: PromiseOrValue<BigNumberish>;
        putCurveMultiplier: PromiseOrValue<BigNumberish>;
        callGrowthMultiplier: PromiseOrValue<BigNumberish>;
        putGrowthMultiplier: PromiseOrValue<BigNumberish>;
    };
    type MultipliersStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        callCurveMultiplier: BigNumber;
        putCurveMultiplier: BigNumber;
        callGrowthMultiplier: BigNumber;
        putGrowthMultiplier: BigNumber;
    };
}
export interface OptionPricingCustomInterface extends utils.Interface {
    functions: {
        "addDelegatedEntity(address)": FunctionFragment;
        "delegatedEntities(uint256)": FunctionFragment;
        "dopex()": FunctionFragment;
        "getIV(address,uint256,uint256,uint256,bool)": FunctionFragment;
        "getOptionPrice(bool,uint256,uint256,address)": FunctionFragment;
        "optionPoolVars(address)": FunctionFragment;
        "propose(address,uint256,uint256,uint256,uint256)": FunctionFragment;
        "proposedQuotes(address,address)": FunctionFragment;
        "removeDelegatedEntity(address)": FunctionFragment;
        "strikePrecision()": FunctionFragment;
        "timeThreshold()": FunctionFragment;
        "updateIVCap(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addDelegatedEntity" | "delegatedEntities" | "dopex" | "getIV" | "getOptionPrice" | "optionPoolVars" | "propose" | "proposedQuotes" | "removeDelegatedEntity" | "strikePrecision" | "timeThreshold" | "updateIVCap"): FunctionFragment;
    encodeFunctionData(functionFragment: "addDelegatedEntity", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "delegatedEntities", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "dopex", values?: undefined): string;
    encodeFunctionData(functionFragment: "getIV", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "getOptionPrice", values: [
        PromiseOrValue<boolean>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "optionPoolVars", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "propose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "proposedQuotes", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "removeDelegatedEntity", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "strikePrecision", values?: undefined): string;
    encodeFunctionData(functionFragment: "timeThreshold", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateIVCap", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "addDelegatedEntity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegatedEntities", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dopex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getIV", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOptionPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "optionPoolVars", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposedQuotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeDelegatedEntity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "strikePrecision", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "timeThreshold", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateIVCap", data: BytesLike): Result;
    events: {};
}
export interface OptionPricingCustom extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OptionPricingCustomInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        delegatedEntities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        dopex(overrides?: CallOverrides): Promise<[string]>;
        getIV(optionPool: PromiseOrValue<string>, strike: PromiseOrValue<BigNumberish>, lastPrice: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, isPut: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getOptionPrice(isPut: PromiseOrValue<boolean>, expiry: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, optionPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        optionPoolVars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            OptionPricingCustom.MultipliersStructOutput
        ] & {
            ivCap: BigNumber;
            multipliers: OptionPricingCustom.MultipliersStructOutput;
        }>;
        propose(_optionPool: PromiseOrValue<string>, _callCurveMultiplier: PromiseOrValue<BigNumberish>, _putCurveMultiplier: PromiseOrValue<BigNumberish>, _callGrowthMultiplier: PromiseOrValue<BigNumberish>, _putGrowthMultiplier: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        proposedQuotes(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            OptionPricingCustom.MultipliersStructOutput
        ] & {
            lastUpdated: BigNumber;
            multipliers: OptionPricingCustom.MultipliersStructOutput;
        }>;
        removeDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        strikePrecision(overrides?: CallOverrides): Promise<[BigNumber]>;
        timeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;
        updateIVCap(_optionPool: PromiseOrValue<string>, _ivCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    delegatedEntities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    dopex(overrides?: CallOverrides): Promise<string>;
    getIV(optionPool: PromiseOrValue<string>, strike: PromiseOrValue<BigNumberish>, lastPrice: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, isPut: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
    getOptionPrice(isPut: PromiseOrValue<boolean>, expiry: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, optionPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    optionPoolVars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        OptionPricingCustom.MultipliersStructOutput
    ] & {
        ivCap: BigNumber;
        multipliers: OptionPricingCustom.MultipliersStructOutput;
    }>;
    propose(_optionPool: PromiseOrValue<string>, _callCurveMultiplier: PromiseOrValue<BigNumberish>, _putCurveMultiplier: PromiseOrValue<BigNumberish>, _callGrowthMultiplier: PromiseOrValue<BigNumberish>, _putGrowthMultiplier: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    proposedQuotes(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        OptionPricingCustom.MultipliersStructOutput
    ] & {
        lastUpdated: BigNumber;
        multipliers: OptionPricingCustom.MultipliersStructOutput;
    }>;
    removeDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    strikePrecision(overrides?: CallOverrides): Promise<BigNumber>;
    timeThreshold(overrides?: CallOverrides): Promise<BigNumber>;
    updateIVCap(_optionPool: PromiseOrValue<string>, _ivCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        delegatedEntities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        dopex(overrides?: CallOverrides): Promise<string>;
        getIV(optionPool: PromiseOrValue<string>, strike: PromiseOrValue<BigNumberish>, lastPrice: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, isPut: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        getOptionPrice(isPut: PromiseOrValue<boolean>, expiry: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, optionPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        optionPoolVars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            OptionPricingCustom.MultipliersStructOutput
        ] & {
            ivCap: BigNumber;
            multipliers: OptionPricingCustom.MultipliersStructOutput;
        }>;
        propose(_optionPool: PromiseOrValue<string>, _callCurveMultiplier: PromiseOrValue<BigNumberish>, _putCurveMultiplier: PromiseOrValue<BigNumberish>, _callGrowthMultiplier: PromiseOrValue<BigNumberish>, _putGrowthMultiplier: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        proposedQuotes(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            OptionPricingCustom.MultipliersStructOutput
        ] & {
            lastUpdated: BigNumber;
            multipliers: OptionPricingCustom.MultipliersStructOutput;
        }>;
        removeDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        strikePrecision(overrides?: CallOverrides): Promise<BigNumber>;
        timeThreshold(overrides?: CallOverrides): Promise<BigNumber>;
        updateIVCap(_optionPool: PromiseOrValue<string>, _ivCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        addDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        delegatedEntities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        dopex(overrides?: CallOverrides): Promise<BigNumber>;
        getIV(optionPool: PromiseOrValue<string>, strike: PromiseOrValue<BigNumberish>, lastPrice: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, isPut: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        getOptionPrice(isPut: PromiseOrValue<boolean>, expiry: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, optionPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        optionPoolVars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        propose(_optionPool: PromiseOrValue<string>, _callCurveMultiplier: PromiseOrValue<BigNumberish>, _putCurveMultiplier: PromiseOrValue<BigNumberish>, _callGrowthMultiplier: PromiseOrValue<BigNumberish>, _putGrowthMultiplier: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        proposedQuotes(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        removeDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        strikePrecision(overrides?: CallOverrides): Promise<BigNumber>;
        timeThreshold(overrides?: CallOverrides): Promise<BigNumber>;
        updateIVCap(_optionPool: PromiseOrValue<string>, _ivCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        delegatedEntities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dopex(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getIV(optionPool: PromiseOrValue<string>, strike: PromiseOrValue<BigNumberish>, lastPrice: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, isPut: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getOptionPrice(isPut: PromiseOrValue<boolean>, expiry: PromiseOrValue<BigNumberish>, strike: PromiseOrValue<BigNumberish>, optionPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        optionPoolVars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        propose(_optionPool: PromiseOrValue<string>, _callCurveMultiplier: PromiseOrValue<BigNumberish>, _putCurveMultiplier: PromiseOrValue<BigNumberish>, _callGrowthMultiplier: PromiseOrValue<BigNumberish>, _putGrowthMultiplier: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        proposedQuotes(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeDelegatedEntity(_delegatedEntity: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        strikePrecision(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        timeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        updateIVCap(_optionPool: PromiseOrValue<string>, _ivCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
