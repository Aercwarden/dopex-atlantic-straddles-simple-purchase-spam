/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RateVaultInterface extends utils.Interface {
  functions: {
    "addToContractWhitelist(address)": FunctionFragment;
    "addresses(bytes32)": FunctionFragment;
    "bootstrap(uint256)": FunctionFragment;
    "calculatePnl(uint256,uint256,uint256,bool)": FunctionFragment;
    "calculatePremium(uint256,uint256,bool)": FunctionFragment;
    "calculatePurchaseFees(uint256,uint256,uint256,bool)": FunctionFragment;
    "calculateSettlementFees(uint256,uint256,uint256,bool)": FunctionFragment;
    "crvLP()": FunctionFragment;
    "crvPool()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "depositMultiple(uint256[],uint256[],uint256[],uint256[],address)": FunctionFragment;
    "emergencyWithdraw(address[],bool)": FunctionFragment;
    "expireDelayTolerance()": FunctionFragment;
    "expireEpoch()": FunctionFragment;
    "expireEpoch(uint256)": FunctionFragment;
    "getAddress(bytes32)": FunctionFragment;
    "getCurrentRate()": FunctionFragment;
    "getEpochData(uint256)": FunctionFragment;
    "getEpochLeverages(uint256)": FunctionFragment;
    "getEpochPremiums(uint256)": FunctionFragment;
    "getEpochStrikeData(uint256,uint256)": FunctionFragment;
    "getEpochStrikes(uint256)": FunctionFragment;
    "getEpochTimes(uint256)": FunctionFragment;
    "getEpochTokens(uint256)": FunctionFragment;
    "getLpPrice()": FunctionFragment;
    "getVolatility(uint256)": FunctionFragment;
    "isContract(address)": FunctionFragment;
    "optionsTokenImplementation()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "purchase(uint256,bool,uint256,address)": FunctionFragment;
    "removeFromContractWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddresses(bytes32[],address[])": FunctionFragment;
    "setLeverages(uint256[],uint256[])": FunctionFragment;
    "setStrikes(uint256[])": FunctionFragment;
    "settle(uint256,bool,uint256,uint256)": FunctionFragment;
    "totalEpochData(uint256)": FunctionFragment;
    "totalStrikeData(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateExpireDelayTolerance(uint256)": FunctionFragment;
    "userEpochStrikeDeposits(uint256,bytes32)": FunctionFragment;
    "userStrikePurchaseData(uint256,bytes32)": FunctionFragment;
    "whitelistedContracts(address)": FunctionFragment;
    "withdrawMultiple(uint256,uint256[],uint256[],uint256[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToContractWhitelist"
      | "addresses"
      | "bootstrap"
      | "calculatePnl"
      | "calculatePremium"
      | "calculatePurchaseFees"
      | "calculateSettlementFees"
      | "crvLP"
      | "crvPool"
      | "currentEpoch"
      | "depositMultiple"
      | "emergencyWithdraw"
      | "expireDelayTolerance"
      | "expireEpoch()"
      | "expireEpoch(uint256)"
      | "getAddress"
      | "getCurrentRate"
      | "getEpochData"
      | "getEpochLeverages"
      | "getEpochPremiums"
      | "getEpochStrikeData"
      | "getEpochStrikes"
      | "getEpochTimes"
      | "getEpochTokens"
      | "getLpPrice"
      | "getVolatility"
      | "isContract"
      | "optionsTokenImplementation"
      | "owner"
      | "pause"
      | "paused"
      | "purchase"
      | "removeFromContractWhitelist"
      | "renounceOwnership"
      | "setAddresses"
      | "setLeverages"
      | "setStrikes"
      | "settle"
      | "totalEpochData"
      | "totalStrikeData"
      | "transferOwnership"
      | "unpause"
      | "updateExpireDelayTolerance"
      | "userEpochStrikeDeposits"
      | "userStrikePurchaseData"
      | "whitelistedContracts"
      | "withdrawMultiple"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToContractWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addresses",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePnl",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePremium",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePurchaseFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSettlementFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "crvLP", values?: undefined): string;
  encodeFunctionData(functionFragment: "crvPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositMultiple",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "expireDelayTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireEpoch()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireEpoch(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochLeverages",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPremiums",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochStrikeData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochStrikes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochTimes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVolatility",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "optionsTokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromContractWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverages",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrikes",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEpochData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStrikeData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateExpireDelayTolerance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userEpochStrikeDeposits",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStrikePurchaseData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMultiple",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToContractWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bootstrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePurchaseFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSettlementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crvPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireDelayTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireEpoch()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireEpoch(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochLeverages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPremiums",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochStrikeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochStrikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLpPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionsTokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromContractWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeverages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStrikes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStrikeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExpireDelayTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEpochStrikeDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStrikePurchaseData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMultiple",
    data: BytesLike
  ): Result;

  events: {
    "AddToContractWhitelist(address)": EventFragment;
    "AddressSet(bytes32,address)": EventFragment;
    "Bootstrap(uint256)": EventFragment;
    "CallsLeverageSet(uint256,uint256)": EventFragment;
    "Compound(uint256,uint256,uint256,uint256)": EventFragment;
    "Deposit(uint256,uint256,uint256,address,address)": EventFragment;
    "EmergencyWithdraw(address)": EventFragment;
    "EpochExpired(address,uint256)": EventFragment;
    "ExpireDelayToleranceUpdate(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Purchase(uint256,uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "PutsLeverageSet(uint256,uint256)": EventFragment;
    "RemoveFromContractWhitelist(address)": EventFragment;
    "Settle(uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
    "StrikeSet(uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WindowSizeUpdate(uint256)": EventFragment;
    "Withdraw(uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToContractWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bootstrap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallsLeverageSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Compound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpireDelayToleranceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PutsLeverageSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveFromContractWhitelist"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrikeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WindowSizeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AddToContractWhitelistEventObject {
  _contract: string;
}
export type AddToContractWhitelistEvent = TypedEvent<
  [string],
  AddToContractWhitelistEventObject
>;

export type AddToContractWhitelistEventFilter =
  TypedEventFilter<AddToContractWhitelistEvent>;

export interface AddressSetEventObject {
  name: string;
  destination: string;
}
export type AddressSetEvent = TypedEvent<
  [string, string],
  AddressSetEventObject
>;

export type AddressSetEventFilter = TypedEventFilter<AddressSetEvent>;

export interface BootstrapEventObject {
  epoch: BigNumber;
}
export type BootstrapEvent = TypedEvent<[BigNumber], BootstrapEventObject>;

export type BootstrapEventFilter = TypedEventFilter<BootstrapEvent>;

export interface CallsLeverageSetEventObject {
  epoch: BigNumber;
  Leverage: BigNumber;
}
export type CallsLeverageSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  CallsLeverageSetEventObject
>;

export type CallsLeverageSetEventFilter =
  TypedEventFilter<CallsLeverageSetEvent>;

export interface CompoundEventObject {
  epoch: BigNumber;
  rewards: BigNumber;
  oldBalance: BigNumber;
  newBalance: BigNumber;
}
export type CompoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  CompoundEventObject
>;

export type CompoundEventFilter = TypedEventFilter<CompoundEvent>;

export interface DepositEventObject {
  epoch: BigNumber;
  strike: BigNumber;
  amount: BigNumber;
  user: string;
  sender: string;
}
export type DepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  sender: string;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface EpochExpiredEventObject {
  sender: string;
  rateAtSettlement: BigNumber;
}
export type EpochExpiredEvent = TypedEvent<
  [string, BigNumber],
  EpochExpiredEventObject
>;

export type EpochExpiredEventFilter = TypedEventFilter<EpochExpiredEvent>;

export interface ExpireDelayToleranceUpdateEventObject {
  expireDelayTolerance: BigNumber;
}
export type ExpireDelayToleranceUpdateEvent = TypedEvent<
  [BigNumber],
  ExpireDelayToleranceUpdateEventObject
>;

export type ExpireDelayToleranceUpdateEventFilter =
  TypedEventFilter<ExpireDelayToleranceUpdateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PurchaseEventObject {
  epoch: BigNumber;
  strike: BigNumber;
  amount: BigNumber;
  premium: BigNumber;
  fee: BigNumber;
  user: string;
  sender: string;
}
export type PurchaseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  PurchaseEventObject
>;

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;

export interface PutsLeverageSetEventObject {
  epoch: BigNumber;
  Leverage: BigNumber;
}
export type PutsLeverageSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  PutsLeverageSetEventObject
>;

export type PutsLeverageSetEventFilter = TypedEventFilter<PutsLeverageSetEvent>;

export interface RemoveFromContractWhitelistEventObject {
  _contract: string;
}
export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string],
  RemoveFromContractWhitelistEventObject
>;

export type RemoveFromContractWhitelistEventFilter =
  TypedEventFilter<RemoveFromContractWhitelistEvent>;

export interface SettleEventObject {
  epoch: BigNumber;
  strike: BigNumber;
  user: string;
  amount: BigNumber;
  pnl: BigNumber;
  fee: BigNumber;
}
export type SettleEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  SettleEventObject
>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface StrikeSetEventObject {
  epoch: BigNumber;
  strike: BigNumber;
}
export type StrikeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  StrikeSetEventObject
>;

export type StrikeSetEventFilter = TypedEventFilter<StrikeSetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WindowSizeUpdateEventObject {
  windowSizeInHours: BigNumber;
}
export type WindowSizeUpdateEvent = TypedEvent<
  [BigNumber],
  WindowSizeUpdateEventObject
>;

export type WindowSizeUpdateEventFilter =
  TypedEventFilter<WindowSizeUpdateEvent>;

export interface WithdrawEventObject {
  epoch: BigNumber;
  strike: BigNumber;
  user: string;
  userDeposits: BigNumber;
  crvLPWithdrawn: BigNumber;
  crvRewards: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface RateVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RateVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addresses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bootstrap(
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculatePnl(
      price: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePremium(
      _strike: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premium: BigNumber }>;

    calculatePurchaseFees(
      price: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSettlementFees(
      rateAtSettlement: PromiseOrValue<BigNumberish>,
      pnl: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    crvLP(overrides?: CallOverrides): Promise<[string]>;

    crvPool(overrides?: CallOverrides): Promise<[string]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositMultiple(
      strikeIndex: PromiseOrValue<BigNumberish>[],
      callLeverageIndex: PromiseOrValue<BigNumberish>[],
      putLeverageIndex: PromiseOrValue<BigNumberish>[],
      amount: PromiseOrValue<BigNumberish>[],
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "expireEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "expireEpoch(uint256)"(
      rateAtSettlement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddress(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochData(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], string[]]>;

    getEpochLeverages(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getEpochPremiums(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getEpochStrikeData(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getEpochStrikes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEpochTimes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    getEpochTokens(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getLpPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVolatility(
      _strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    purchase(
      strikeIndex: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      names: PromiseOrValue<BytesLike>[],
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLeverages(
      callsLeverages: PromiseOrValue<BigNumberish>[],
      putsLeverages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrikes(
      strikes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      strikeIndex: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalEpochData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCallsDeposits: BigNumber;
        totalPutsDeposits: BigNumber;
        totalTokenDeposits: BigNumber;
        epochCallsPremium: BigNumber;
        epochPutsPremium: BigNumber;
        totalCallsPurchased: BigNumber;
        totalPutsPurchased: BigNumber;
        epochStartTimes: BigNumber;
        epochExpiryTime: BigNumber;
        isEpochExpired: boolean;
        isVaultReady: boolean;
        epochBalanceAfterUnstaking: BigNumber;
        crvToDistribute: BigNumber;
        rateAtSettlement: BigNumber;
      }
    >;

    totalStrikeData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalTokensStrikeDeposits: BigNumber;
        totalCallsStrikeDeposits: BigNumber;
        totalPutsStrikeDeposits: BigNumber;
        totalCallsPurchased: BigNumber;
        totalPutsPurchased: BigNumber;
        callsSettlement: BigNumber;
        putsSettlement: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userEpochStrikeDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        callLeverage: BigNumber;
        putLeverage: BigNumber;
      }
    >;

    userStrikePurchaseData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        putsPurchased: BigNumber;
        callsPurchased: BigNumber;
        userEpochCallsPremium: BigNumber;
        userEpochPutsPremium: BigNumber;
      }
    >;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawMultiple(
      epoch: PromiseOrValue<BigNumberish>,
      strikeIndex: PromiseOrValue<BigNumberish>[],
      callLeverageIndex: PromiseOrValue<BigNumberish>[],
      putLeverageIndex: PromiseOrValue<BigNumberish>[],
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addToContractWhitelist(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addresses(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  bootstrap(
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculatePnl(
    price: PromiseOrValue<BigNumberish>,
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isPut: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePremium(
    _strike: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _isPut: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePurchaseFees(
    price: PromiseOrValue<BigNumberish>,
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isPut: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSettlementFees(
    rateAtSettlement: PromiseOrValue<BigNumberish>,
    pnl: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isPut: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  crvLP(overrides?: CallOverrides): Promise<string>;

  crvPool(overrides?: CallOverrides): Promise<string>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  depositMultiple(
    strikeIndex: PromiseOrValue<BigNumberish>[],
    callLeverageIndex: PromiseOrValue<BigNumberish>[],
    putLeverageIndex: PromiseOrValue<BigNumberish>[],
    amount: PromiseOrValue<BigNumberish>[],
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    tokens: PromiseOrValue<string>[],
    transferNative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  "expireEpoch()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "expireEpoch(uint256)"(
    rateAtSettlement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddress(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentRate(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochData(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[], string[]]>;

  getEpochLeverages(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  getEpochPremiums(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  getEpochStrikeData(
    epoch: PromiseOrValue<BigNumberish>,
    strike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  getEpochStrikes(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEpochTimes(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

  getEpochTokens(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getLpPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getVolatility(
    _strike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isContract(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  optionsTokenImplementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  purchase(
    strikeIndex: PromiseOrValue<BigNumberish>,
    isPut: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromContractWhitelist(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    names: PromiseOrValue<BytesLike>[],
    destinations: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLeverages(
    callsLeverages: PromiseOrValue<BigNumberish>[],
    putsLeverages: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrikes(
    strikes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    strikeIndex: PromiseOrValue<BigNumberish>,
    isPut: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalEpochData(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalCallsDeposits: BigNumber;
      totalPutsDeposits: BigNumber;
      totalTokenDeposits: BigNumber;
      epochCallsPremium: BigNumber;
      epochPutsPremium: BigNumber;
      totalCallsPurchased: BigNumber;
      totalPutsPurchased: BigNumber;
      epochStartTimes: BigNumber;
      epochExpiryTime: BigNumber;
      isEpochExpired: boolean;
      isVaultReady: boolean;
      epochBalanceAfterUnstaking: BigNumber;
      crvToDistribute: BigNumber;
      rateAtSettlement: BigNumber;
    }
  >;

  totalStrikeData(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalTokensStrikeDeposits: BigNumber;
      totalCallsStrikeDeposits: BigNumber;
      totalPutsStrikeDeposits: BigNumber;
      totalCallsPurchased: BigNumber;
      totalPutsPurchased: BigNumber;
      callsSettlement: BigNumber;
      putsSettlement: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExpireDelayTolerance(
    _expireDelayTolerance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userEpochStrikeDeposits(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      callLeverage: BigNumber;
      putLeverage: BigNumber;
    }
  >;

  userStrikePurchaseData(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      putsPurchased: BigNumber;
      callsPurchased: BigNumber;
      userEpochCallsPremium: BigNumber;
      userEpochPutsPremium: BigNumber;
    }
  >;

  whitelistedContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawMultiple(
    epoch: PromiseOrValue<BigNumberish>,
    strikeIndex: PromiseOrValue<BigNumberish>[],
    callLeverageIndex: PromiseOrValue<BigNumberish>[],
    putLeverageIndex: PromiseOrValue<BigNumberish>[],
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addresses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    bootstrap(
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculatePnl(
      price: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremium(
      _strike: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseFees(
      price: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSettlementFees(
      rateAtSettlement: PromiseOrValue<BigNumberish>,
      pnl: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crvLP(overrides?: CallOverrides): Promise<string>;

    crvPool(overrides?: CallOverrides): Promise<string>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    depositMultiple(
      strikeIndex: PromiseOrValue<BigNumberish>[],
      callLeverageIndex: PromiseOrValue<BigNumberish>[],
      putLeverageIndex: PromiseOrValue<BigNumberish>[],
      amount: PromiseOrValue<BigNumberish>[],
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyWithdraw(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    "expireEpoch()"(overrides?: CallOverrides): Promise<boolean>;

    "expireEpoch(uint256)"(
      rateAtSettlement: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAddress(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentRate(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochData(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], string[]]>;

    getEpochLeverages(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getEpochPremiums(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getEpochStrikeData(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getEpochStrikes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEpochTimes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    getEpochTokens(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getLpPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getVolatility(
      _strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    purchase(
      strikeIndex: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      names: PromiseOrValue<BytesLike>[],
      destinations: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    setLeverages(
      callsLeverages: PromiseOrValue<BigNumberish>[],
      putsLeverages: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    setStrikes(
      strikes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    settle(
      strikeIndex: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCallsDeposits: BigNumber;
        totalPutsDeposits: BigNumber;
        totalTokenDeposits: BigNumber;
        epochCallsPremium: BigNumber;
        epochPutsPremium: BigNumber;
        totalCallsPurchased: BigNumber;
        totalPutsPurchased: BigNumber;
        epochStartTimes: BigNumber;
        epochExpiryTime: BigNumber;
        isEpochExpired: boolean;
        isVaultReady: boolean;
        epochBalanceAfterUnstaking: BigNumber;
        crvToDistribute: BigNumber;
        rateAtSettlement: BigNumber;
      }
    >;

    totalStrikeData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalTokensStrikeDeposits: BigNumber;
        totalCallsStrikeDeposits: BigNumber;
        totalPutsStrikeDeposits: BigNumber;
        totalCallsPurchased: BigNumber;
        totalPutsPurchased: BigNumber;
        callsSettlement: BigNumber;
        putsSettlement: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userEpochStrikeDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        callLeverage: BigNumber;
        putLeverage: BigNumber;
      }
    >;

    userStrikePurchaseData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        putsPurchased: BigNumber;
        callsPurchased: BigNumber;
        userEpochCallsPremium: BigNumber;
        userEpochPutsPremium: BigNumber;
      }
    >;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawMultiple(
      epoch: PromiseOrValue<BigNumberish>,
      strikeIndex: PromiseOrValue<BigNumberish>[],
      callLeverageIndex: PromiseOrValue<BigNumberish>[],
      putLeverageIndex: PromiseOrValue<BigNumberish>[],
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddToContractWhitelist(address)"(
      _contract?: PromiseOrValue<string> | null
    ): AddToContractWhitelistEventFilter;
    AddToContractWhitelist(
      _contract?: PromiseOrValue<string> | null
    ): AddToContractWhitelistEventFilter;

    "AddressSet(bytes32,address)"(
      name?: PromiseOrValue<BytesLike> | null,
      destination?: PromiseOrValue<string> | null
    ): AddressSetEventFilter;
    AddressSet(
      name?: PromiseOrValue<BytesLike> | null,
      destination?: PromiseOrValue<string> | null
    ): AddressSetEventFilter;

    "Bootstrap(uint256)"(epoch?: null): BootstrapEventFilter;
    Bootstrap(epoch?: null): BootstrapEventFilter;

    "CallsLeverageSet(uint256,uint256)"(
      epoch?: null,
      Leverage?: null
    ): CallsLeverageSetEventFilter;
    CallsLeverageSet(
      epoch?: null,
      Leverage?: null
    ): CallsLeverageSetEventFilter;

    "Compound(uint256,uint256,uint256,uint256)"(
      epoch?: null,
      rewards?: null,
      oldBalance?: null,
      newBalance?: null
    ): CompoundEventFilter;
    Compound(
      epoch?: null,
      rewards?: null,
      oldBalance?: null,
      newBalance?: null
    ): CompoundEventFilter;

    "Deposit(uint256,uint256,uint256,address,address)"(
      epoch?: null,
      strike?: null,
      amount?: null,
      user?: null,
      sender?: null
    ): DepositEventFilter;
    Deposit(
      epoch?: null,
      strike?: null,
      amount?: null,
      user?: null,
      sender?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address)"(sender?: null): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(sender?: null): EmergencyWithdrawEventFilter;

    "EpochExpired(address,uint256)"(
      sender?: null,
      rateAtSettlement?: null
    ): EpochExpiredEventFilter;
    EpochExpired(
      sender?: null,
      rateAtSettlement?: null
    ): EpochExpiredEventFilter;

    "ExpireDelayToleranceUpdate(uint256)"(
      expireDelayTolerance?: null
    ): ExpireDelayToleranceUpdateEventFilter;
    ExpireDelayToleranceUpdate(
      expireDelayTolerance?: null
    ): ExpireDelayToleranceUpdateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Purchase(uint256,uint256,uint256,uint256,uint256,address,address)"(
      epoch?: null,
      strike?: null,
      amount?: null,
      premium?: null,
      fee?: null,
      user?: null,
      sender?: null
    ): PurchaseEventFilter;
    Purchase(
      epoch?: null,
      strike?: null,
      amount?: null,
      premium?: null,
      fee?: null,
      user?: null,
      sender?: null
    ): PurchaseEventFilter;

    "PutsLeverageSet(uint256,uint256)"(
      epoch?: null,
      Leverage?: null
    ): PutsLeverageSetEventFilter;
    PutsLeverageSet(epoch?: null, Leverage?: null): PutsLeverageSetEventFilter;

    "RemoveFromContractWhitelist(address)"(
      _contract?: PromiseOrValue<string> | null
    ): RemoveFromContractWhitelistEventFilter;
    RemoveFromContractWhitelist(
      _contract?: PromiseOrValue<string> | null
    ): RemoveFromContractWhitelistEventFilter;

    "Settle(uint256,uint256,address,uint256,uint256,uint256)"(
      epoch?: null,
      strike?: null,
      user?: null,
      amount?: null,
      pnl?: null,
      fee?: null
    ): SettleEventFilter;
    Settle(
      epoch?: null,
      strike?: null,
      user?: null,
      amount?: null,
      pnl?: null,
      fee?: null
    ): SettleEventFilter;

    "StrikeSet(uint256,uint256)"(
      epoch?: null,
      strike?: null
    ): StrikeSetEventFilter;
    StrikeSet(epoch?: null, strike?: null): StrikeSetEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WindowSizeUpdate(uint256)"(
      windowSizeInHours?: null
    ): WindowSizeUpdateEventFilter;
    WindowSizeUpdate(windowSizeInHours?: null): WindowSizeUpdateEventFilter;

    "Withdraw(uint256,uint256,address,uint256,uint256,uint256)"(
      epoch?: null,
      strike?: null,
      user?: null,
      userDeposits?: null,
      crvLPWithdrawn?: null,
      crvRewards?: null
    ): WithdrawEventFilter;
    Withdraw(
      epoch?: null,
      strike?: null,
      user?: null,
      userDeposits?: null,
      crvLPWithdrawn?: null,
      crvRewards?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addresses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrap(
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculatePnl(
      price: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremium(
      _strike: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseFees(
      price: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSettlementFees(
      rateAtSettlement: PromiseOrValue<BigNumberish>,
      pnl: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crvLP(overrides?: CallOverrides): Promise<BigNumber>;

    crvPool(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    depositMultiple(
      strikeIndex: PromiseOrValue<BigNumberish>[],
      callLeverageIndex: PromiseOrValue<BigNumberish>[],
      putLeverageIndex: PromiseOrValue<BigNumberish>[],
      amount: PromiseOrValue<BigNumberish>[],
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    "expireEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "expireEpoch(uint256)"(
      rateAtSettlement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddress(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRate(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochData(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochLeverages(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPremiums(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochStrikeData(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochStrikes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochTimes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochTokens(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getVolatility(
      _strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      strikeIndex: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      names: PromiseOrValue<BytesLike>[],
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLeverages(
      callsLeverages: PromiseOrValue<BigNumberish>[],
      putsLeverages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrikes(
      strikes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      strikeIndex: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalEpochData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStrikeData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userEpochStrikeDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStrikePurchaseData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawMultiple(
      epoch: PromiseOrValue<BigNumberish>,
      strikeIndex: PromiseOrValue<BigNumberish>[],
      callLeverageIndex: PromiseOrValue<BigNumberish>[],
      putLeverageIndex: PromiseOrValue<BigNumberish>[],
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addresses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bootstrap(
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculatePnl(
      price: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePremium(
      _strike: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePurchaseFees(
      price: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSettlementFees(
      rateAtSettlement: PromiseOrValue<BigNumberish>,
      pnl: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crvLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositMultiple(
      strikeIndex: PromiseOrValue<BigNumberish>[],
      callLeverageIndex: PromiseOrValue<BigNumberish>[],
      putLeverageIndex: PromiseOrValue<BigNumberish>[],
      amount: PromiseOrValue<BigNumberish>[],
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expireDelayTolerance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "expireEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "expireEpoch(uint256)"(
      rateAtSettlement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddress(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochData(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochLeverages(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochPremiums(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochStrikeData(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochStrikes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochTimes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochTokens(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVolatility(
      _strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionsTokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      strikeIndex: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      names: PromiseOrValue<BytesLike>[],
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLeverages(
      callsLeverages: PromiseOrValue<BigNumberish>[],
      putsLeverages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrikes(
      strikes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      strikeIndex: PromiseOrValue<BigNumberish>,
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalEpochData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStrikeData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userEpochStrikeDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStrikePurchaseData(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawMultiple(
      epoch: PromiseOrValue<BigNumberish>,
      strikeIndex: PromiseOrValue<BigNumberish>[],
      callLeverageIndex: PromiseOrValue<BigNumberish>[],
      putLeverageIndex: PromiseOrValue<BigNumberish>[],
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
